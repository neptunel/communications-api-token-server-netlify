{"version":3,"file":"commands.js","mappings":"YAKA,IA0FIA,EAhFEC,EANmBC,KAAKC,MAAMD,KAAKE,SAAWC,KAAKC,OAAOC,WAEvCL,KAAKE,SAASG,SAAS,IAAIC,UAAU,EAAG,GAO3DC,EAbS,wCAaaR,EAEtBS,EAAU,OAAM,YAAAC,OACNF,EAAW,mDACvB,WAAU,eAAAE,OACKV,GAHH,kMAUF,aAAAU,OAXM,wEAYSF,EAAW,KACpC,WAiEJG,OAAOC,SAAQ,WACXb,EAAcY,OAAOE,QAAQC,QAAQC,KACzBJ,OAAOE,QAAQC,QAAQE,YAAYC,WACnD,IAGAN,OAAOO,QAAQC,UAAU,wBAlEzB,SAA8BC,GAetBrB,EAAYsB,KAAKC,SAASb,EACtB,CAAEc,aAAcH,EAAOI,aAAc,SACrC,SAAUC,GACFA,EAAcC,SAAWf,OAAOgB,kBAAkBC,UAClDH,EAAcF,aAAaM,UAAU,CAAEC,YAAY,KAEnDC,QAAQC,MAAM,4BACdP,EAAcF,aAAaM,UAAU,CAAEC,YAAY,IAE3D,IAsBZ,SAAqBV,EAAMZ,GACvBT,EAAYkC,SAASX,SAASd,EAC1B,CAAEe,aAAcH,IAAQ,SAACc,GACzB,GAAIA,EAAOR,SAAWf,OAAOgB,kBAAkBC,UAG/C,OAFAG,QAAQC,MAAM,8BAADtB,OAA+BwB,EAAOF,MAAMG,eACzDD,EAAOX,aAAaM,UAAU,CAAEC,YAAY,IAG5CC,QAAQK,IAAI,gCAAD1B,OAAiCF,IAC5C0B,EAAOX,aAAaM,UAAU,CAAEC,YAAY,GAChD,GACJ,CA9BQO,CAAYjB,EAAOZ,EAC3B,G","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["\n\n\n// 1. How to construct online meeting details.\n// domain name can be changed based on which client you want to use (capi is for internal use only)\nconst domain = \"https://capi.dolby.io/closed.beta.sp/\";\n\nconst generateUniqueId = () => {\n     // Generate a random number and convert it to a string\n    const randomNumber = Math.floor(Math.random() * Date.now()).toString();\n    // Generate a random 4-character string\n    const randomString = Math.random().toString(36).substring(2, 6);\n    // Concatenate the random number and random string\n    return randomNumber + randomString;\n};\nconst meetingID = generateUniqueId();\n\n// const meetingLink = domain+ meetingID + \"?name=\" +`${userName}`;\nconst meetingLink = domain+ meetingID;\nconst QRGenerator = \"https://chart.googleapis.com/chart?chs=150x150&cht=qr&choe=UTF-8&chl=\";\nconst newBody = '<br>' +\n    `<a href= ${meetingLink} target=\"_blank\">Join a Dolby.io Video Call</a>` +\n    '<br><br>' +\n    `Meeting ID: ${meetingID}` +\n    '<br><br>' +\n    'Want to test your video connection?' +\n    '<br><br>' +\n    '<a href=\"https://capi.dolby.io/closed.beta.sp/\" target=\"_blank\">Join a test meeting</a>' +\n    '<br><br>'+\n    'Scan the QR Code to join the meeting:'+\n    '<br><br>'+\n    `<img src= ${QRGenerator+meetingLink}>`+\n    '<br><br>';\n    \n\n// 2. How to define and register a function command named `insertDolbyioMeeting` (referenced in the manifest)\n//    to update the meeting body with the online meeting details.\nfunction insertDolbyioMeeting(event) {\n    // Get HTML body from the client. Uses updateBody to append at the end of existing body.\n    // mailboxItem.body.getAsync(\"html\",\n    //     { asyncContext: event },\n    //     function (getBodyResult) {\n    //         if (getBodyResult.status === Office.AsyncResultStatus.Succeeded) {\n    //             updateBody(getBodyResult.asyncContext, getBodyResult.value);\n    //         } else {\n    //             console.error(\"Failed to get HTML body.\");\n    //             getBodyResult.asyncContext.completed({ allowEvent: false });\n    //         }\n    //     }\n    // );\n    // Sets body from scratch each time the add-in works.\n        // Append new body to the existing body.\n        mailboxItem.body.setAsync(newBody,\n            { asyncContext: event, coercionType: \"html\" },\n            function (setBodyResult) {\n                if (setBodyResult.status === Office.AsyncResultStatus.Succeeded) {\n                    setBodyResult.asyncContext.completed({ allowEvent: true });\n                } else {\n                    console.error(\"Failed to set HTML body.\");\n                    setBodyResult.asyncContext.completed({ allowEvent: false });\n                }\n            }\n        );\n    \n        setLocation(event, meetingLink);\n}\n\n// 3. How to implement a supporting function `updateBody`\n//    that appends the online meeting details to the current body of the meeting.\nfunction updateBody(event, existingBody) {\n    // Append new body to the existing body.\n    mailboxItem.body.setAsync(existingBody + newBody,\n        { asyncContext: event, coercionType: \"html\" },\n        function (setBodyResult) {\n            if (setBodyResult.status === Office.AsyncResultStatus.Succeeded) {\n                setBodyResult.asyncContext.completed({ allowEvent: true });\n            } else {\n                console.error(\"Failed to set HTML body.\");\n                setBodyResult.asyncContext.completed({ allowEvent: false });\n            }\n        }\n    );\n}\nfunction setLocation(event,meetingLink){\n    mailboxItem.location.setAsync(meetingLink,  \n        { asyncContext: event },(result) => {\n        if (result.status !== Office.AsyncResultStatus.Succeeded) {\n        console.error(`Action failed with message ${result.error.message}`);\n        result.asyncContext.completed({ allowEvent: false });\n        return;\n        }\n        console.log(`Successfully set location to ${meetingLink}`);\n        result.asyncContext.completed({ allowEvent: true });\n    });\n}\nlet mailboxItem, userName;\n// Office is ready.\nOffice.onReady(function () {\n    mailboxItem = Office.context.mailbox.item;\n    userName =  Office.context.mailbox.userProfile.displayName;\n}\n);\n// Register the function.\nOffice.actions.associate(\"insertDolbyioMeeting\", insertDolbyioMeeting);"],"names":["mailboxItem","meetingID","Math","floor","random","Date","now","toString","substring","meetingLink","newBody","concat","Office","onReady","context","mailbox","item","userProfile","displayName","actions","associate","event","body","setAsync","asyncContext","coercionType","setBodyResult","status","AsyncResultStatus","Succeeded","completed","allowEvent","console","error","location","result","message","log","setLocation"],"sourceRoot":""}